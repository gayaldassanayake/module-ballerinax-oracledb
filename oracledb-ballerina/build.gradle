/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os
import groovyx.gpars.GParsPool

description = 'Ballerina - Oracle DB Ballerina Generator'

def packageName = "oracledb"
def packageOrg = "ballerinax"
def platform = "java11"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def artifactCodeCoverageReport = file("$project.projectDir/target/cache/tests_cache/coverage/ballerina.exec")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def distributionPath = project.projectDir.absolutePath + "/build/target/jballerina-tools-${ballerinaLangVersion}"
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    distributionPath = distributionPath.replaceAll("\\\\", "/")
}
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text
def originalDependencies = ballerinaDependencyFile.text
def testCoverageParam = "--code-coverage --includes=org.ballerinalang.oracledb.*:ballerinax.*"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

configurations {
    jbalTools
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(":${packageName}-native")
}

buildscript { 
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.codehaus.gpars:gpars:1.1.0"
    }
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    into distributionPath
    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task updateTomlFile {
    doLast {
        def stdlibDependentSqlVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)
        def stdlibCryptoVersion = stripBallerinaExtensionVersion(project.stdlibCryptoVersion)

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version.toString())
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@project.path@", distributionPath)
        newConfig = newConfig.replace("@stdlib.sql.native.version@", project.stdlibSqlVersion.toString())
        newConfig = newConfig.replace("@stdlib.sql.version@", stdlibDependentSqlVersion)

        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.sql.version@", stdlibDependentSqlVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.crypto.version@", stdlibCryptoVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""
def testParams = ""
def poolTests = true
def needSeparateTest = false
def needBuildWithTest = false
def needPublishToCentral = false
def needPublishToLocalCentral = false
def skipTests = true

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
        if(!project.findProperty("groups").contains("pool")) {
            poolTests = false
        }
    }
    if (project.hasProperty("disable-groups")) {
        disableGroups = "--disable-groups ${project.findProperty("disable-groups")}"
        if(project.findProperty("disable-groups").contains("pool")) {
            poolTests = false
        }
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
    if (project.hasProperty("publishToLocalCentral") && (project.findProperty("publishToLocalCentral") == "true")) {
        needPublishToLocalCentral = true
    }
    if (project.hasProperty("publishToCentral") && (project.findProperty("publishToCentral") == "true")) {
        needPublishToCentral = true
    }
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:build") ||
                graph.hasTask(":${packageName}-ballerina:publish") ||
                graph.hasTask(":${packageName}-ballerina:publishToMavenLocal")) {
            needSeparateTest = false
            needBuildWithTest = true

            if (graph.hasTask(":${packageName}-ballerina:publish")) {
                needPublishToCentral = true
            }
        } else {
            needSeparateTest = true
        }
        
        if (graph.hasTask(":${packageName}-ballerina:test")) {
            testParams = "${testCoverageParam}"
            skipTests = false
        } else {
            testParams = "--skip-tests"
        }
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)

    doLast {
        if (needSeparateTest) {
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                environment "STDLIB_VERSION", tomlVersion
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test ${testCoverageParam} ${groupParams} ${disableGroups} ${debugParams} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test ${testCoverageParam} ${groupParams} ${disableGroups} ${debugParams}"
                }
            }
        } else if (needBuildWithTest) {
            // Build and populate caches
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                environment "STDLIB_VERSION", tomlVersion
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build -c ${testParams} ${debugParams} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build -c ${testParams} ${debugParams}"
                }
            }
            // extract bala file to artifact cache directory
            file("$project.projectDir/target/bala").eachFileMatch(~/.*.bala/) { balaFile ->
                copy {
                    from zipTree(balaFile)
                    into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
                }
            }
            copy {
                from file("$project.projectDir/target/cache")
                exclude '**/*-testable.jar'
                exclude '**/tests_cache/'
                into file("$artifactCacheParent/cache/")
            }

            // Doc creation and packing
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal doc"
                }
            }
            copy {
                from file("$project.projectDir/target/apidocs/${packageName}")
                into file("$project.projectDir/build/docs_parent/docs/${packageName}")
            }
        }

        if (needPublishToCentral) {
            if (project.version.endsWith('-SNAPSHOT') || project.version.matches(project.ext.timestampedVersionRegex)) {
                return
            }
            if (ballerinaCentralAccessToken != null) {
                println("Publishing to the ballerina central..")
                exec {
                    workingDir project.projectDir
                    environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "$distributionBinPath/bal push"
                    }
                }
            } else {
                throw new InvalidUserDataException("Central Access Token is Not Present")
            }
        } else if (needPublishToLocalCentral) {
            println("Publishing to the ballerina local central repository..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%% --repository=local"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push --repository=local"
                }
            }
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
            artifact source: artifactCodeCoverageReport, classifier: 'jacoco'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

static def checkExecResult(execResult, failText, standardOutput){
    if (execResult) {
        if (execResult.getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + execResult.getExitValue())
        }
        if (standardOutput.toString().contains(failText)){
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

task createTestDockerImage() {
    def runTests = false
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:test") && !Os.isFamily(Os.FAMILY_WINDOWS)) {
            def standardOutput = new ByteArrayOutputStream()
            def execResult = exec {
                commandLine 'sh', '-c', "docker build -f $project.projectDir/tests/resources/Dockerfile -t ballerina-oracledb" +
                    " -q $project.projectDir/tests/resources/"
            }
            doLast {
                checkExecResult(execResult, 'Error', standardOutput)
                sleep(10 * 1000)
            }
        }
    }
}

def waitForContainerHealth(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def HEALTH_STATUS;
        def counter = 0
        while (counter < 60) {
            sleep(10000)
            def output = new ByteArrayOutputStream()
            try {
                exec {
                    commandLine 'sh', '-c',
                            "docker inspect --format='{{json .State.Health.Status}}' ${containerName}"
                    standardOutput = output
                }
                HEALTH_STATUS = output.toString().trim()
                if (HEALTH_STATUS.toString().contains("healthy")) {
                    return 0
                }
                if (counter % 6 == 0) {
                    println("${counter/6}: Waiting for container ${containerName} to be healthy")
                    println("   HEALTH_STATUS: $HEALTH_STATUS \n")
                }
                counter = counter + 1
            } catch (err) {
                println(err)
                return 1
            }
        }
        return 1
    }
}

def initializeDatabase(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        println("Waiting for ${containerName} database to open.")
        sleep(3*60*1000)
        try {
            def temp = exec {
                commandLine 'sh', '-c',
                        "docker exec ${containerName} /bin/bash -c 'cd home/oracle && source .bashrc; sqlplus /nolog <<< @create-schema.sql'"
            }.exitValue
            return temp
        } catch (all) {
            println(all)
            return 1
        }
    }
}

def startDockerContainer(containerName, port) {
     if (graph.hasTask(":${packageName}-ballerina:test") && !Os.isFamily(Os.FAMILY_WINDOWS)) {
        exec {
            commandLine 'sh', '-c', "docker run --rm -d --name ${containerName} -p ${port}:1521 -t ballerina-oracledb"
        }
        def healthCheck = waitForContainerHealth(containerName)
        if (healthCheck != 0) {
            throw new GradleException("Docker container '${containerName}' health test failed!")
        }
        println("Docker container '${containerName}' health test passed!")

        def initializeCheck = initializeDatabase(containerName)
        if(initializeCheck != 0) {
            throw new GradleException("Failed to initialize the database!")
        }
        println("Database initialized!")

    }
}

task startTestDockerContainers() {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:test")) {
            doLast {
                if (poolTests) {
                    GParsPool.withPool { GParsPool.executeAsyncAndWait(
                            {startDockerContainer("ballerina-oracledb", 1521)},
                            {startDockerContainer("ballerina-oracledb-pool", 1522)}
                    )}
                } else {
                    startDockerContainer("ballerina-oracledb", 1521)
                }
            }
        }
    }
}

task stopTestDockerContainers() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def containers = "ballerina-oracledb"
            if (poolTests) {
                containers = "ballerina-oracledb ballerina-oracledb-pool"
            }
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', "docker stop ${containers}"
                    standardOutput = stdOut
                }
            } catch (ignore) {
                println("Gradle process can safely ignore stopTestDockerContainers task")
            }
        }
    }
}

unpackJballerinaTools.dependsOn copyToLib
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlFile.dependsOn copyStdlibs

createTestDockerImage.dependsOn initializeVariables
startTestDockerContainers.dependsOn createTestDockerImage
ballerinaBuild.dependsOn startTestDockerContainers

ballerinaBuild.dependsOn updateTomlFile
ballerinaBuild.dependsOn ":${packageName}-native:build"
ballerinaBuild.finalizedBy revertTomlFile
ballerinaBuild.finalizedBy stopTestDockerContainers

// test.dependsOn startTestDockerContainers
// test.finalizedBy ballerinaBuild
build.dependsOn ballerinaBuild

publishToMavenLocal.dependsOn build
publish.dependsOn build
